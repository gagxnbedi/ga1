// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7tSQdxgu7FmCVtUmJP9sF2
// Component: cTpe4fEaek5z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ProductCollection } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductMedia } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7tSQdxgu7FmCVtUmJP9sF2/projectcss
import sty from "./PlasmicNn.module.css"; // plasmic-import: cTpe4fEaek5z/css

import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: ySFwM-zkVZ28/icon

createPlasmicElementProxy;

export type PlasmicNn__VariantMembers = {};
export type PlasmicNn__VariantsArgs = {};
type VariantPropType = keyof PlasmicNn__VariantsArgs;
export const PlasmicNn__VariantProps = new Array<VariantPropType>();

export type PlasmicNn__ArgsType = {};
type ArgPropType = keyof PlasmicNn__ArgsType;
export const PlasmicNn__ArgProps = new Array<ArgPropType>();

export type PlasmicNn__OverridesType = {
  root?: Flex__<typeof ProductCollection>;
  freeBox?: Flex__<"div">;
  productTextField?: Flex__<typeof ProductTextField>;
  productMedia?: Flex__<typeof ProductMedia>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultNnProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNn__RenderFunc(props: {
  variants: PlasmicNn__VariantsArgs;
  args: PlasmicNn__ArgsType;
  overrides: PlasmicNn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <ProductCollection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      emptyMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"No product found!"}
            </div>
          )}
        </DataCtxReader__>
      }
      loadingMessage={
        <DataCtxReader__>
          {$ctx => (
            <LikeIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          )}
        </DataCtxReader__>
      }
    >
      <DataCtxReader__>
        {$ctx => (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <ProductTextField
              data-plasmic-name={"productTextField"}
              data-plasmic-override={overrides.productTextField}
              className={classNames("__wab_instance", sty.productTextField)}
              field={"name"}
            />

            <ProductMedia
              data-plasmic-name={"productMedia"}
              data-plasmic-override={overrides.productMedia}
              className={classNames("__wab_instance", sty.productMedia)}
            />
          </div>
        )}
      </DataCtxReader__>
    </ProductCollection>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "productTextField", "productMedia", "text", "svg"],
  freeBox: ["freeBox", "productTextField", "productMedia"],
  productTextField: ["productTextField"],
  productMedia: ["productMedia"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof ProductCollection;
  freeBox: "div";
  productTextField: typeof ProductTextField;
  productMedia: typeof ProductMedia;
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNn__VariantsArgs;
    args?: PlasmicNn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNn__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNn__ArgProps,
          internalVariantPropNames: PlasmicNn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNn";
  } else {
    func.displayName = `PlasmicNn.${nodeName}`;
  }
  return func;
}

export const PlasmicNn = Object.assign(
  // Top-level PlasmicNn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    productTextField: makeNodeComponent("productTextField"),
    productMedia: makeNodeComponent("productMedia"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicNn
    internalVariantProps: PlasmicNn__VariantProps,
    internalArgProps: PlasmicNn__ArgProps
  }
);

export default PlasmicNn;
/* prettier-ignore-end */
